do local a=package.searchers or package.loaders;local b=a[2]a[2]=function(c)local d={["telem.lib.Backplane"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local h=require'telem.lib.OutputAdapter'local i=require'telem.lib.MetricCollection'local j=e.class()j.type='Backplane'function j:constructor()self.debugState=false;self.inputs={}self.outputs={}self.inputKeys={}self.outputKeys={}end;function j:addInput(k,l)assert(type(k)=='string','name must be a string')assert(e.instanceof(l,g),'Input must be an InputAdapter')self.inputs[k]=l;table.insert(self.inputKeys,k)return self end;function j:addOutput(k,m)assert(type(k)=='string','name must be a string')assert(e.instanceof(m,h),'Output must be an OutputAdapter')self.outputs[k]=m;table.insert(self.outputKeys,k)return self end;function j:processMiddleware()return self end;function j:cycle()local n={}local o=i()self:dlog('** cycle START !')self:dlog('reading inputs...')for p,q in ipairs(self.inputKeys)do local l=self.inputs[q]self:dlog(' - '..q)local r={pcall(l.read,l)}if not table.remove(r,1)then f.log('Input fault for "'..q..'":')f.pprint(table.remove(r,1))else local s=table.remove(r,1)for p,t in ipairs(s.metrics)do t.adapter=q;table.insert(n,t)end end end;self:dlog('sorting metrics...')table.sort(n,function(u,v)return u.name<v.name end)for p,t in ipairs(n)do o:insert(t)end;self:dlog('writing outputs...')for p,q in pairs(self.outputKeys)do local m=self.outputs[q]self:dlog(' - '..q)local r={pcall(m.write,m,o)}if not table.remove(r,1)then f.log('Output fault for "'..q..'":')f.pprint(table.remove(r,1))end end;self:dlog('** cycle END !')return self end;function j:cycleEvery(w)return function()while true do self:cycle()f.sleep(w)end end end;function j:debug(x)self.debugState=x and true or false;return self end;function j:dlog(y)if self.debugState then f.log(y)end end;return j end,["telem.lib.Metric"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local z=e.class()z.type='Metric'function z:constructor(A,B)local C;if type(A)=='table'then C=A else C={name=A,value=B}end;self.name=assert(C.name,'Metric must have a name')self.value=assert(C.value,'Metric must have a value')self.unit=C.unit or nil;self.source=C.source or nil;self.adapter=C.adapter or nil end;function z:__tostring()local D=self.name..' = '..self.value;local E,F,G;E=self.unit and' '..self.unit or''F=self.source and' ('..self.source..')'or''G=self.adapter and' from '..self.adapter or''return D..E..G..F end;return z end,["telem.lib.util"]=function()local H={pretty_print=print}local function I(J)local K=tonumber(os.clock()+J)while os.clock()<K do end end;local function L(y)print('TELEM :: '..y)end;local function M(y)error('TELEM :: '..y)end;local function N(O)return H.pretty_print(O)end;local function P(f,Q)local u={}for R in pairs(f)do table.insert(u,R)end;table.sort(u,Q)local S=0;local T=function()S=S+1;if u[S]==nil then return nil else return u[S],f[u[S]]end end;return T end;return{log=L,err=M,pprint=N,skpairs=P,sleep=os.sleep or I}end,["telem.lib.MetricCollection"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local z=require'telem.lib.Metric'local i=e.class()i.type='MetricCollection'function i:constructor(...)self.metrics={}self.context={}local U=select(1,...)if type(U)=='table'and not e.instanceof(U,z)then for k,V in pairs(U)do self:insert(z(k,V))end else for p,t in next,{...}do self:insert(t)end end end;function i:insert(W)assert(e.instanceof(W,z),'Element must be a Metric')table.insert(self.metrics,W)return self end;function i:setContext(X)self.context={table.unpack(X)}return self end;return i end,["telem.lib.ObjectModel"]=function()local u='Lua 5.1'==_VERSION;local unpack=unpack or table.unpack;local function v(Y,...)local Z={}setmetatable(Z,Y)if Y.constructor then Y.constructor(Z,...)end;return Z end;local function _(Z,Q,...)if nil==Z.___superScope then Z.___superScope={}end;local a0=Z.___superScope[Q]local a1;if nil~=a0 then a1=a0.__parent else a1=Z.__parent end;Z.___superScope[Q]=a1;local S={pcall(a1[Q],Z,...)}local a2=table.remove(S,1)Z.___superScope[Q]=a0;if not a2 then error(S[1])end;return unpack(S)end;local function a3(Z,a4)local Y=getmetatable(Z)while Y do if Y==a4 then return true end;Y=Y.__parent end;return false end;local function a5(Z)if Z.destructor then Z:destructor()end end;local function Y(R)local Y={}if R then for e,a6 in pairs(R)do Y[e]=a6 end;Y.__parent=R end;Y.__index=Y;if not R and not u then Y.__gc=a5 end;if R then Y.super=_ end;local a7={__call=v}setmetatable(Y,a7)return Y end;return{class=Y,instanceof=a3,new=v,super=_}end,["telem.lib.input.MEStorageInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local a8=e.class(g)a8.type='MEStorageInputAdapter'function a8:constructor(a9)self:super('constructor')self.prefix='storage:'self:addComponentByPeripheralID(a9)end;function a8:read()local F,aa=next(self.components)local ab=aa.listItems()local ac=aa.listFluid()local o=i()for p,t in pairs(ab)do if t then o:insert(z({name=self.prefix..t.name,value=t.amount,unit='item',source=F}))end end;for p,t in pairs(ac)do if t then o:insert(z({name=self.prefix..t.name,value=t.amount/1000,unit='B',source=F}))end end;return o end;return a8 end,["telem.lib.input.RefinedStorageInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ad=e.class(g)ad.type='RefinedStorageInputAdapter'function ad:constructor(a9)self:super('constructor')self.prefix='storage:'self:addComponentByPeripheralID(a9)end;function ad:read()local F,aa=next(self.components)local ab=aa.listItems()local ac=aa.listFluids()local o=i()for p,t in pairs(ab)do if t then o:insert(z({name=self.prefix..t.name,value=t.amount,unit='item',source=F}))end end;for p,t in pairs(ac)do if t then o:insert(z({name=self.prefix..t.name,value=t.amount/1000,unit='B',source=F}))end end;return o end;return ad end,["telem.lib.input"]=function()return{helloWorld=require'telem.lib.input.HelloWorldInputAdapter',itemStorage=require'telem.lib.input.ItemStorageInputAdapter',fluidStorage=require'telem.lib.input.FluidStorageInputAdapter',refinedStorage=require'telem.lib.input.RefinedStorageInputAdapter',meStorage=require'telem.lib.input.MEStorageInputAdapter',mekanism={fissionReactor=require'telem.lib.input.mekanism.FissionReactorInputAdapter',inductionMatrix=require'telem.lib.input.mekanism.InductionMatrixInputAdapter',industrialTurbine=require'telem.lib.input.mekanism.IndustrialTurbineInputAdapter',fusionReactor=require'telem.lib.input.mekanism.FusionReactorInputAdapter'}}end,["telem.lib.input.ItemStorageInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ae=e.class(g)ae.type='ItemStorageInputAdapter'function ae:constructor(a9)self:super('constructor')self.prefix='storage:'self:addComponentByPeripheralID(a9)end;function ae:read()local F,af=next(self.components)local ab=af.list()local n={}for p,t in pairs(ab)do if t then local ag=self.prefix..t.name;n[ag]=(n[ag]or 0)+t.count end end;local o=i()for a3,t in pairs(n)do if t then o:insert(z({name=a3,value=t,unit='item',source=F}))end end;return o end;return ae end,["telem.lib.input.mekanism.FissionReactorInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ah=e.class(g)ah.type='FissionReactorInputAdapter'function ah:constructor(a9,ai)self:super('constructor')self.prefix='mekfission:'local aj={'basic','advanced','fuel','coolant','waste','formation'}if not ai then self.categories={'basic'}elseif ai=='*'then self.categories=aj else self.categories=ai end;self:addComponentByPeripheralID(a9)end;function ah:read()local F,ak=next(self.components)local o=i()local al={}for p,t in ipairs(self.categories)do if al[t]then elseif t=='basic'then o:insert(z{name=self.prefix..'status',value=ak.getStatus()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'burn_rate',value=ak.getBurnRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'max_burn_rate',value=ak.getMaxBurnRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'temperature',value=ak.getTemperature(),unit='K',source=F})o:insert(z{name=self.prefix..'damage_percent',value=ak.getDamagePercent(),unit=nil,source=F})o:insert(z{name=self.prefix..'fuel_filled_percentage',value=ak.getFuelFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'coolant_filled_percentage',value=ak.getCoolantFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'heated_coolant_filled_percentage',value=ak.getHeatedCoolantFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'waste_filled_percentage',value=ak.getWasteFilledPercentage(),unit=nil,source=F})elseif t=='advanced'then o:insert(z{name=self.prefix..'actual_burn_rate',value=ak.getActualBurnRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'environmental_loss',value=ak.getEnvironmentalLoss(),unit=nil,source=F})o:insert(z{name=self.prefix..'heating_rate',value=ak.getHeatingRate()/1000,unit='B/t',source=F})elseif t=='coolant'then o:insert(z{name=self.prefix..'coolant',value=ak.getCoolant().amount/1000,unit='B',source=F})o:insert(z{name=self.prefix..'coolant_capacity',value=ak.getCoolantCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'coolant_needed',value=ak.getCoolantNeeded()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'heated_coolant',value=ak.getHeatedCoolant().amount/1000,unit='B',source=F})o:insert(z{name=self.prefix..'heated_coolant_capacity',value=ak.getHeatedCoolantCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'heated_coolant_needed',value=ak.getHeatedCoolantNeeded()/1000,unit='B',source=F})elseif t=='fuel'then o:insert(z{name=self.prefix..'fuel',value=ak.getFuel().amount/1000,unit='B',source=F})o:insert(z{name=self.prefix..'fuel_capacity',value=ak.getFuelCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'fuel_needed',value=ak.getFuelNeeded(),unit='B',source=F})elseif t=='waste'then o:insert(z{name=self.prefix..'waste',value=ak.getWaste().amount/1000,unit='B',source=F})o:insert(z{name=self.prefix..'waste_capacity',value=ak.getWasteCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'waste_needed',value=ak.getWasteNeeded()/1000,unit='B',source=F})elseif t=='formation'then o:insert(z{name=self.prefix..'formed',value=ak.isFormed()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'force_disabled',value=ak.isForceDisabled()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'height',value=ak.getHeight(),unit='m',source=F})o:insert(z{name=self.prefix..'length',value=ak.getLength(),unit='m',source=F})o:insert(z{name=self.prefix..'width',value=ak.getWidth(),unit='m',source=F})o:insert(z{name=self.prefix..'fuel_assemblies',value=ak.getFuelAssemblies(),unit=nil,source=F})o:insert(z{name=self.prefix..'fuel_surface_area',value=ak.getFuelSurfaceArea(),unit='m²',source=F})o:insert(z{name=self.prefix..'heat_capacity',value=ak.getHeatCapacity(),unit='J/K',source=F})o:insert(z{name=self.prefix..'boil_efficiency',value=ak.getBoilEfficiency(),unit=nil,source=F})end;al[t]=true end;return o end;return ah end,["telem.lib.input.mekanism.IndustrialTurbineInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local am=e.class(g)am.type='IndustrialTurbineInputAdapter'local an={IDLE=1,DUMPING_EXCESS=2,DUMPING=3}function am:constructor(a9,ai)self:super('constructor')self.prefix='mekturbine:'local aj={'basic','advanced','energy','steam','formation'}if not ai then self.categories={'basic'}elseif ai=='*'then self.categories=aj else self.categories=ai end;self:addComponentByPeripheralID(a9)end;function am:read()local F,ao=next(self.components)local o=i()local al={}for p,t in ipairs(self.categories)do if al[t]then elseif t=='basic'then o:insert(z{name=self.prefix..'energy_filled_percentage',value=ao.getEnergyFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'energy_production_rate',value=mekanismEnergyHelper.joulesToFE(ao.getProductionRate()),unit='FE/t',source=F})o:insert(z{name=self.prefix..'energy_max_production',value=mekanismEnergyHelper.joulesToFE(ao.getMaxProduction()),unit='FE/t',source=F})o:insert(z{name=self.prefix..'steam_filled_percentage',value=ao.getSteamFilledPercentage(),unit=nil,source=F})elseif t=='advanced'then o:insert(z{name=self.prefix..'comparator_level',value=ao.getComparatorLevel(),unit=nil,source=F})o:insert(z{name=self.prefix..'dumping_mode',value=an[ao.getDumpingMode()],unit=nil,source=F})o:insert(z{name=self.prefix..'flow_rate',value=ao.getFlowRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'max_flow_rate',value=ao.getMaxFlowRate()/1000,unit='B/t',source=F})elseif t=='energy'then o:insert(z{name=self.prefix..'energy',value=mekanismEnergyHelper.joulesToFE(ao.getEnergy()),unit='FE',source=F})o:insert(z{name=self.prefix..'max_energy',value=mekanismEnergyHelper.joulesToFE(ao.getMaxEnergy()),unit='FE',source=F})o:insert(z{name=self.prefix..'energy_needed',value=mekanismEnergyHelper.joulesToFE(ao.getEnergyNeeded()),unit='FE',source=F})elseif t=='steam'then o:insert(z{name=self.prefix..'steam_input_rate',value=ao.getLastSteamInputRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'steam',value=ao.getSteam().amount/1000,unit='B',source=F})o:insert(z{name=self.prefix..'steam_capacity',value=ao.getSteamCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'steam_needed',value=ao.getSteamNeeded()/1000,unit='B',source=F})elseif t=='formation'then o:insert(z{name=self.prefix..'formed',value=ao.isFormed()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'height',value=ao.getHeight(),unit='m',source=F})o:insert(z{name=self.prefix..'length',value=ao.getLength(),unit='m',source=F})o:insert(z{name=self.prefix..'width',value=ao.getWidth(),unit='m',source=F})o:insert(z{name=self.prefix..'blades',value=ao.getBlades(),unit=nil,source=F})o:insert(z{name=self.prefix..'coils',value=ao.getCoils(),unit=nil,source=F})o:insert(z{name=self.prefix..'condensers',value=ao.getCondensers(),unit=nil,source=F})o:insert(z{name=self.prefix..'dispersers',value=ao.getDispersers(),unit=nil,source=F})o:insert(z{name=self.prefix..'vents',value=ao.getVents(),unit=nil,source=F})o:insert(z{name=self.prefix..'max_water_output',value=ao.getMaxWaterOutput()/1000,unit='B/t',source=F})end;al[t]=true end;return o end;return am end,["telem.lib.input.mekanism.InductionMatrixInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ap=e.class(g)ap.type='InductionMatrixInputAdapter'function ap:constructor(a9,ai)self:super('constructor')self.prefix='mekinduction:'local aj={'basic','advanced','energy','formation'}if not ai then self.categories={'basic'}elseif ai=='*'then self.categories=aj else self.categories=ai end;self:addComponentByPeripheralID(a9)end;function ap:read()local F,aq=next(self.components)local o=i()local al={}for p,t in ipairs(self.categories)do if al[t]then elseif t=='basic'then o:insert(z{name=self.prefix..'energy_filled_percentage',value=aq.getEnergyFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'energy_input',value=mekanismEnergyHelper.joulesToFE(aq.getLastInput()),unit='FE/t',source=F})o:insert(z{name=self.prefix..'energy_output',value=mekanismEnergyHelper.joulesToFE(aq.getLastOutput()),unit='FE/t',source=F})o:insert(z{name=self.prefix..'energy_transfer_cap',value=mekanismEnergyHelper.joulesToFE(aq.getTransferCap()),unit='FE/t',source=F})elseif t=='advanced'then o:insert(z{name=self.prefix..'comparator_level',value=aq.getComparatorLevel(),unit=nil,source=F})elseif t=='energy'then o:insert(z{name=self.prefix..'energy',value=mekanismEnergyHelper.joulesToFE(aq.getEnergy()),unit='FE',source=F})o:insert(z{name=self.prefix..'max_energy',value=mekanismEnergyHelper.joulesToFE(aq.getMaxEnergy()),unit='FE',source=F})o:insert(z{name=self.prefix..'energy_needed',value=mekanismEnergyHelper.joulesToFE(aq.getEnergyNeeded()),unit='FE',source=F})elseif t=='formation'then o:insert(z{name=self.prefix..'formed',value=aq.isFormed()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'height',value=aq.getHeight(),unit='m',source=F})o:insert(z{name=self.prefix..'length',value=aq.getLength(),unit='m',source=F})o:insert(z{name=self.prefix..'width',value=aq.getWidth(),unit='m',source=F})o:insert(z{name=self.prefix..'installed_cells',value=aq.getInstalledCells(),unit=nil,source=F})o:insert(z{name=self.prefix..'installed_providers',value=aq.getInstalledProviders(),unit=nil,source=F})end;al[t]=true end;return o end;return ap end,["telem.lib.input.mekanism.FusionReactorInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ar=e.class(g)ar.type='FusionReactorInputAdapter'function ar:constructor(a9,ai)self:super('constructor')self.prefix='mekfusion:'local aj={'basic','advanced','fuel','coolant','formation'}if not ai then self.categories={'basic'}elseif ai=='*'then self.categories=aj else self.categories=ai end;self:addComponentByPeripheralID(a9)end;function ar:read()local F,as=next(self.components)local o=i()local al={}for p,t in ipairs(self.categories)do if al[t]then elseif t=='basic'then local at=as.isActiveCooledLogic()o:insert(z{name=self.prefix..'plasma_temperature',value=as.getPlasmaTemperature(),unit='K',source=F})o:insert(z{name=self.prefix..'case_temperature',value=as.getCaseTemperature(),unit='K',source=F})o:insert(z{name=self.prefix..'water_filled_percentage',value=as.getWaterFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'steam_filled_percentage',value=as.getSteamFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'tritium_filled_percentage',value=as.getTritiumFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'deuterium_filled_percentage',value=as.getDeuteriumFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'dt_fuel_filled_percentage',value=as.getDTFuelFilledPercentage(),unit=nil,source=F})o:insert(z{name=self.prefix..'production_rate',value=mekanismEnergyHelper.joulesToFE(as.getProductionRate()),unit=nil,source=F})o:insert(z{name=self.prefix..'injection_rate',value=as.getInjectionRate()/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'min_injection_rate',value=as.getMinInjectionRate(at)/1000,unit='B/t',source=F})o:insert(z{name=self.prefix..'max_plasma_temperature',value=as.getMaxPlasmaTemperature(at),unit='K',source=F})o:insert(z{name=self.prefix..'max_casing_temperature',value=as.getMaxCasingTemperature(at),unit='K',source=F})o:insert(z{name=self.prefix..'passive_generation_rate',value=mekanismEnergyHelper.joulesToFE(as.getPassiveGeneration(at)),unit='FE/t',source=F})o:insert(z{name=self.prefix..'ignition_temperature',value=as.getIgnitionTemperature(at),unit='K',source=F})elseif t=='advanced'then elseif t=='coolant'then o:insert(z{name=self.prefix..'water_capacity',value=as.getWaterCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'water_needed',value=as.getWaterNeeded()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'steam_capacity',value=as.getSteamCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'steam_needed',value=as.getSteamNeeded()/1000,unit='B',source=F})elseif t=='fuel'then o:insert(z{name=self.prefix..'tritium_capacity',value=as.getTritiumCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'tritium_needed',value=as.getTritiumNeeded()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'deuterium_capacity',value=as.getDeuteriumCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'deuterium_needed',value=as.getDeuteriumNeeded()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'dt_fuel_capacity',value=as.getDTFuelCapacity()/1000,unit='B',source=F})o:insert(z{name=self.prefix..'dt_fuel_needed',value=as.getDTFuelNeeded()/1000,unit='B',source=F})elseif t=='formation'then o:insert(z{name=self.prefix..'formed',value=as.isFormed()and 1 or 0,unit=nil,source=F})o:insert(z{name=self.prefix..'height',value=as.getHeight(),unit='m',source=F})o:insert(z{name=self.prefix..'length',value=as.getLength(),unit='m',source=F})o:insert(z{name=self.prefix..'width',value=as.getWidth(),unit='m',source=F})o:insert(z{name=self.prefix..'active_cooled_logic',value=as.isActiveCooledLogic()and 1 or 0,unit=nil,source=F})end;al[t]=true end;return o end;return ar end,["telem.lib.input.FluidStorageInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local au=e.class(g)au.type='FluidStorageInputAdapter'function au:constructor(a9)self:super('constructor')self.prefix='storage:'self:addComponentByPeripheralID(a9)end;function au:read()local F,av=next(self.components)local aw=av.tanks()local n={}for p,t in pairs(aw)do if t then local ag=self.prefix..t.name;n[ag]=(n[ag]or 0)+t.amount/1000 end end;local o=i()for a3,t in pairs(n)do if t then o:insert(z({name=a3,value=t,unit='B',source=F}))end end;return o end;return au end,["telem.lib.input.HelloWorldInputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=require'telem.lib.InputAdapter'local z=require'telem.lib.Metric'local i=require'telem.lib.MetricCollection'local ax=e.class(g)ax.type='HelloWorldInputAdapter'function ax:constructor(ay)self.checkval=ay;self:super('constructor')end;function ax:read()return i{hello_world=self.checkval}end;return ax end,["telem.lib.output.HelloWorldOutputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local h=require'telem.lib.OutputAdapter'local i=require'telem.lib.MetricCollection'local az=e.class(h)az.type='HelloWorldOutputAdapter'function az:constructor()self:super('constructor')end;function az:write(aA)assert(e.instanceof(aA,i),'Collection must be a MetricCollection')for a3,t in pairs(aA.metrics)do print('Hello, '..t.name..' = '..t.value..'!')end end;return az end,["telem.lib.output"]=function()return{helloWorld=require'telem.lib.output.HelloWorldOutputAdapter',grafana=require'telem.lib.output.GrafanaOutputAdapter'}end,["telem.lib.output.GrafanaOutputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local h=require'telem.lib.OutputAdapter'local i=require'telem.lib.MetricCollection'local aB=e.class(h)aB.type='GrafanaOutputAdapter'function aB:constructor(aC,aD)self:super('constructor')self.endpoint=assert(aC,'Endpoint is required')self.apiKey=assert(aD,'API key is required')end;function aB:write(aA)assert(e.instanceof(aA,i),'Collection must be a MetricCollection')local aE={}for p,t in pairs(aA.metrics)do local aF=t.unit and t.unit~=''and',unit='..t.unit or''local aG=t.source and t.source~=''and',source='..t.source or''local aH=t.adapter and t.adapter~=''and',adapter='..t.adapter or''table.insert(aE,t.name..aF..aG..aH..(' metric=%f'):format(t.value))end;local aI=http.post({url=self.endpoint,body=table.concat(aE,'\n'),headers={Authorization=('Bearer %s'):format(self.apiKey)}})end;return aB end,["telem.lib.InputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local g=e.class()g.type='InputAdapter'function g:constructor()assert(self.type~=g.type,'InputAdapter cannot be instantiated')self.components={}self.prefix=''end;function g:addComponentByPeripheralID(aJ)local aK=peripheral.wrap(aJ)assert(aK,'Could not find peripheral ID '..aJ)self.components[aJ]=aK end;function g:addComponentByPeripheralType(type)local q=type..'_'..#{self.components}local aK=peripheral.find(type)assert(aK,'Could not find peripheral type '..type)self.components[q]=aK end;function g:read()f.err(self.type..' has not implemented read()')end;return g end,["telem.lib.OutputAdapter"]=function()local e=require'telem.lib.ObjectModel'local f=require'telem.lib.util'local h=e.class()h.type='OutputAdapter'function h:constructor()assert(self.type~=h.type,'OutputAdapter cannot be instantiated')self.components={}end;function h:addComponentByPeripheralID(aJ)self.components.insert(peripheral.wrap(aJ))end;function h:addComponentByPeripheralType(type)self.components.insert(peripheral.find(type))end;function h:write(o)f.err(self.type..' has not implemented write()')end;return h end}if d[c]then return d[c]else return b(c)end end end;local aL={_VERSION='0.0.1',util=require'telem.lib.util',input=require'telem.lib.input',output=require'telem.lib.output',backplane=require'telem.lib.Backplane'}return aL
